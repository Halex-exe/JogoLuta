package Cliente;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * @author gabriel
 */
public class GamePanel extends javax.swing.JFrame {

    Player player;
    static List<Player> players = new ArrayList<>();

    String host = "127.0.0.1";
    int porta = 8020;

    Socket s;
    BufferedReader in;
    PrintWriter out;

    Boolean keyRight = false, keyLeft = false, keyUp = false, keyDown = false, keySpace = false;
    Thread t;

    /**
     * Creates new form GamePanel
     */
    public GamePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setText("Player A:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 580, 55, 40);
        jLabel1.getAccessibleContext().setAccessibleName("labelA");

        jLabel2.setText("100");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(70, 580, 30, 40);
        jLabel2.getAccessibleContext().setAccessibleName("vidaA");

        jLabel3.setText("Player B:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(705, 580, 55, 40);
        jLabel3.getAccessibleContext().setAccessibleName("labelB");

        jLabel4.setText("100");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(755, 580, 30, 40);
        jLabel4.getAccessibleContext().setAccessibleName("vidaB");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                keyRight = true;
                enviarMensagem("r");
                //player.setIconRight();
                break;
            case KeyEvent.VK_LEFT:
                keyLeft = true;
                enviarMensagem("l");
                //player.setIconLeft();
                break;
            case KeyEvent.VK_UP:
                keyUp = true;
                enviarMensagem("u");
                break;
            case KeyEvent.VK_DOWN:
                keyDown = true;
                enviarMensagem("d");
                break;
            case KeyEvent.VK_SPACE:
                keySpace = true;
                enviarMensagem("s");
                break;
        }

    }//GEN-LAST:event_formKeyPressed

    public void enviarMensagem(String msg) { //mexer //talvez deixar como thread!
        out.println(msg);
        out.flush();
        //System.out.println(msg);
    }

    public void receberMensagens() { //(transformar em Thread)
        new Thread(() -> {
            try {
                try {
                    String msg;
                    while ((msg = in.readLine()) != null) {
                        System.out.println(msg);
                        if (msg.indexOf('-') >= 0) {
                            if (GamePanel.players.size() >= 2) {
                                String[] string = msg.split("-");
                                String[] jogadorA = string[0].split(":");
                                String[] jogadorB = string[1].split(":");

                                int controleAx, controleBx;
                                controleAx = players.get(0).x;
                                controleBx = players.get(1).x;

                                if (controleAx > Integer.parseInt(jogadorA[0])) {
                                    players.get(0).setIconLeft();
                                    Thread.sleep(30);
                                } else {
                                    if (controleAx < Integer.parseInt(jogadorA[0])) {
                                        players.get(0).setIconRight();
                                        Thread.sleep(30);
                                    } else {
                                        if (controleAx == Integer.parseInt(jogadorA[0])) {
                                            if (Integer.parseInt(jogadorA[3]) == 1) {
                                                players.get(0).setIconSpace();
                                                Thread.sleep(40);
                                            } else {
                                                players.get(0).setIconStopped();
                                            }
                                        }
                                    }
                                }
                                players.get(0).setBounds(Integer.parseInt(jogadorA[0]), (Integer.parseInt(jogadorA[1])), 90, 127);
                                players.get(0).x = Integer.parseInt(jogadorA[0]);
                                players.get(0).y = Integer.parseInt(jogadorA[1]);
                                jLabel2.setText((jogadorA[2]));
                                players.get(0).vida = Integer.parseInt(jogadorA[2]);

                                if (controleBx > Integer.parseInt(jogadorB[0])) {
                                    players.get(1).setIconLeft();
                                    Thread.sleep(30);
                                } else {
                                    if (controleBx < Integer.parseInt(jogadorB[0])) {
                                        players.get(1).setIconRight();
                                        Thread.sleep(30);
                                    } else {
                                        if (controleBx == Integer.parseInt(jogadorB[0])) {
                                            if (Integer.parseInt(jogadorB[3]) == 1) {
                                                players.get(1).setIconSpace();
                                                Thread.sleep(40);
                                            } else {
                                                players.get(1).setIconStopped();
                                            }
                                        }
                                    }
                                }
                                players.get(1).setBounds(Integer.parseInt(jogadorB[0]), (Integer.parseInt(jogadorB[1])), 90, 127);
                                players.get(1).x = Integer.parseInt(jogadorB[0]);
                                players.get(1).y = Integer.parseInt(jogadorB[1]);
                                jLabel4.setText((jogadorB[2]));
                                players.get(1).vida = Integer.parseInt(jogadorB[2]);

                            } else {
                                if (GamePanel.players.size() == 1) {
                                    player = new Player();
                                    player.setup(); //configura o player.
                                    getContentPane().add(player);
                                    repaint();
                                    player.setIconStopped();
                                    players.add(player);

                                } else {
                                    if (GamePanel.players.size() == 0) {

                                        player = new Player();
                                        player.setup(); //configura o player.
                                        getContentPane().add(player);
                                        repaint();
                                        player.setIconStopped();
                                        players.add(player);
                                    }
                                }
                            }
                        } else {
                            if (msg.indexOf('!') >= 0) {
                                if (msg.indexOf('A') >= 0){
                                    jLabel2.setText("100");
                                }else{
                                    jLabel4.setText("100");
                                }
                                mostraGanhador(msg);
                            } else {
                                if (GamePanel.players.size() == 0) {

                                    player = new Player();
                                    player.setup(); //configura o player.
                                    getContentPane().add(player);
                                    repaint();
                                    player.setIconStopped();
                                    players.add(player); //

                                }
                                String[] separado = msg.split(":");
                                players.get(0).setBounds(Integer.parseInt(separado[0]), (Integer.parseInt(separado[1])), 90, 127);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }).start();
    }

    private void formKeyReleased(KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                keyRight = false;
                //player.setIconStopped();
                break;
            case KeyEvent.VK_LEFT:
                keyLeft = false;
                //player.setIconStopped();
                break;
            case KeyEvent.VK_UP:
                keyUp = false;
                //player.setIconStopped();
                break;
            case KeyEvent.VK_DOWN:
                keyDown = false;
                //player.setIconStopped();
                break;
            case KeyEvent.VK_SPACE:
                keySpace = false;
                //player.setIconStopped();
                break;
        }
    }//GEN-LAST:event_formKeyReleased

    public void mostraGanhador(String msg){
        javax.swing.JLabel vencedorLabel;
        vencedorLabel = new javax.swing.JLabel();

        vencedorLabel.setText(msg);
        getContentPane().add(vencedorLabel);
        vencedorLabel.setBounds(370, 325, 300, 40);

        while (true){

        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        // TODO add your handling code here:
        try {
            s = new Socket(host, porta);
            in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            out = new PrintWriter(s.getOutputStream());

            receberMensagens();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GamePanel g = new GamePanel();
                g.setSize(800, 650);
                g.setResizable(false);
                g.setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
